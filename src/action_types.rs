
pub mod action_types {
    use std::str::FromStr;

    impl FromStr for ActionTypes {
        type Err = String;

        fn from_str(input: &str) -> Result<ActionTypes, Self::Err> {
            match input {
                "ADC"  => Ok(ActionTypes::ADC),
                "AND"  => Ok(ActionTypes::AND),
                "ASL"  => Ok(ActionTypes::ASL),
                "BCC"  => Ok(ActionTypes::BCC),
                "BCS"  => Ok(ActionTypes::BCS),
                "BEQ"  => Ok(ActionTypes::BEQ),
                "BIT"  => Ok(ActionTypes::BIT),
                "BMI"  => Ok(ActionTypes::BMI),
                "BNE"  => Ok(ActionTypes::BNE),
                "BPL"  => Ok(ActionTypes::BPL),
                "BRK"  => Ok(ActionTypes::BRK),
                "BVC"  => Ok(ActionTypes::BVC),
                "BVS"  => Ok(ActionTypes::BVS),
                "CLC"  => Ok(ActionTypes::CLC),
                "CLD"  => Ok(ActionTypes::CLD),
                "CLI"  => Ok(ActionTypes::CLI),
                "CLV"  => Ok(ActionTypes::CLV),
                "CMP"  => Ok(ActionTypes::CMP),
                "CPX"  => Ok(ActionTypes::CPX),
                "CPY"  => Ok(ActionTypes::CPY),
                "DEC"  => Ok(ActionTypes::DEC),
                "DEX"  => Ok(ActionTypes::DEX),
                "DEY"  => Ok(ActionTypes::DEY),
                "EOR"  => Ok(ActionTypes::EOR),
                "INC"  => Ok(ActionTypes::INC),
                "INX"  => Ok(ActionTypes::INX),
                "INY"  => Ok(ActionTypes::INY),
                "JMP"  => Ok(ActionTypes::JMP),
                "JSR"  => Ok(ActionTypes::JSR),
                "LDA"  => Ok(ActionTypes::LDA),
                "LDX"  => Ok(ActionTypes::LDX),
                "LDY"  => Ok(ActionTypes::LDY),
                "LSR"  => Ok(ActionTypes::LSR),
                "NOP"  => Ok(ActionTypes::NOP),
                "ORA"  => Ok(ActionTypes::ORA),
                "PHA"  => Ok(ActionTypes::PHA),
                "PHP"  => Ok(ActionTypes::PHP),
                "PLA"  => Ok(ActionTypes::PLA),
                "PLP"  => Ok(ActionTypes::PLP),
                "ROL"  => Ok(ActionTypes::ROL),
                "ROR"  => Ok(ActionTypes::ROR),
                "RTI"  => Ok(ActionTypes::RTI),
                "RTS"  => Ok(ActionTypes::RTS),
                "SBC"  => Ok(ActionTypes::SBC),
                "SEC"  => Ok(ActionTypes::SEC),
                "SED"  => Ok(ActionTypes::SED),
                "SEI"  => Ok(ActionTypes::SEI),
                "STA"  => Ok(ActionTypes::STA),
                "STX"  => Ok(ActionTypes::STX),
                "STY"  => Ok(ActionTypes::STY),
                "TAX"  => Ok(ActionTypes::TAX),
                "TAY"  => Ok(ActionTypes::TAY),
                "TSX"  => Ok(ActionTypes::TSX),
                "TXA"  => Ok(ActionTypes::TXA),
                "TXS"  => Ok(ActionTypes::TXS),
                "TYA"  => Ok(ActionTypes::TYA),
                _      => Err("There is no instruction with that name".to_string()),
            }
        }
    }

    #[derive(Clone)]
    pub enum ActionTypes {
        ADC,
        AND,
        ASL,
        BCC,
        BCS,
        BEQ,
        BIT,
        BMI,
        BNE,
        BPL,
        BRK,
        BVC,
        BVS,
        CLC,
        CLD,
        CLI,
        CLV,
        CMP,
        CPX,
        CPY,
        DEC,
        DEX,
        DEY,
        EOR,
        INC,
        INX,
        INY,
        JMP,
        JSR,
        LDA,
        LDX,
        LDY,
        LSR,
        NOP,
        ORA,
        PHA,
        PHP,
        PLA,
        PLP,
        ROL,
        ROR,
        RTI,
        RTS,
        SBC,
        SEC,
        SED,
        SEI,
        STA,
        STX,
        STY,
        TAX,
        TAY,
        TSX,
        TXA,
        TXS,
        TYA
    }
}